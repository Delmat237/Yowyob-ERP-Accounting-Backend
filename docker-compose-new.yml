services:
  # ScyllaDB : base de données NoSQL compatible Cassandra
  scylla:
    image: scylladb/scylla:latest
    container_name: scylla
    ports:
      - "9042:9042"
    command: ["--smp", "2", "--memory", "2G", "--overprovisioned", "1"]
    volumes:
      - scylla-data:/var/lib/scylla
    networks:
      - my-network

  # Init ScyllaDB avec le script CQL
  scylla-init:
    image: scylladb/scylla:latest
    container_name: scylla-init
    volumes:
      - ./src/main/resources/db/init.cql:/src/main/resources/db/init.cql
    entrypoint: ["bash", "-c"]
    command: |
      echo 'Waiting for ScyllaDB to be ready...'
      until cqlsh scylla 9042 -e 'describe keyspaces' > /dev/null 2>&1; do
        echo 'ScyllaDB is not ready yet...'
        sleep 5
      done
      echo 'ScyllaDB is ready. Executing init.cql...'
      cqlsh scylla 9042 -f /init.cql
    networks:
      - my-network
    depends_on:
      scylla:
        condition: service_healthy

  # Elasticsearch
  elasticsearch:
    image: elasticsearch:8.11.1
    hostname: elasticsearch
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data:/usr/share/elasticsearch/data
    networks:
      - my-network

  # Kafka broker (KRaft mode)
  # kafka:
  #   image: confluentinc/cp-kafka:latest
  #   hostname: kafka
  #   container_name: kafka
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_PROCESS_ROLES: 'controller,broker'
  #     KAFKA_NODE_ID: 1
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
  #     KAFKA_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093'
  #     KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT'
  #     KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
  #     KAFKA_DELETE_TOPIC_ENABLE: 'true'
  #     KAFKA_CLUSTER_ID: 'LJZdLnX2Qt2yJGYr1J0Sjg'
  #   volumes:
  #     - kafka-data:/var/lib/kafka/data
  #   networks:
  #     - my-network
  #   command: >
  #     bash -c "
  #       /etc/confluent/docker/run &
  #       PID=$!;
  #       sleep 5;
  #       kafka-storage format --ignore-formatted --cluster-id='LJZdLnX2Qt2yJGYr1J0Sjg' --config /etc/kafka/config/server.properties;
  #       wait $PID
  #     "
  #   healthcheck:
  #     test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 10
  #     start_period: 30s
  
    # Zookeeper : coordinateur pour le cluster Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      - my-network

  # Kafka : broker de messages, dépendant de Zookeeper
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    networks:
      - my-network
    depends_on:
      zookeeper:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list > /dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Kafka UI : interface utilisateur pour l'administration de Kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - my-network
    depends_on:
      kafka:
        condition: service_healthy

  # Redis
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6380:6379" # expose 6379 interne sur 6380 externe
    command: redis-server --bind 0.0.0.0 --requirepass azaleodel --port 6379
    volumes:
      - redis-data:/data
    networks:
      - my-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a azaleodel -p 6379 ping | grep -q PONG"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Application Spring Boot
  yowyob-erp-backend:
    build:
      context: .
    container_name: yowyob-erp-backend
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - spring.cassandra.contact-points=scylla
      - spring.cassandra.port=9042
      - spring.cassandra.local-datacenter=datacenter1
      - spring.redis.host=redis
      - spring.redis.port=6379 # interne Redis
      - spring.redis.password=azaleodel
      - spring.kafka.bootstrap-servers=kafka:9092
    depends_on:
      scylla-init:
        condition: service_completed_successfully
      elasticsearch:
        condition: service_started
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - my-network

# Volumes persistants
volumes:
  scylla-data:
  es-data:
  redis-data:
  kafka-data:

# Réseau
networks:
  my-network:
    driver: bridge
