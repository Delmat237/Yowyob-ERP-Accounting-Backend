services:
  # ScyllaDB : base de données NoSQL compatible Cassandra pour la persistance des données
  scylla:
    image: scylladb/scylla:5.4
    container_name: scylla
    ports:
      - "9042:9042"

    command: ["--smp", "2", "--memory", "2G", "--overprovisioned", "1"]
    volumes:
      - scylla-data:/var/lib/scylla
    networks:
      - my-network
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe keyspaces' > /dev/null 2>&1"]
      interval: 30s
      timeout: 10s
      retries: 10

  # scylla-init : service pour initialiser ScyllaDB avec le script CQL
  scylla-init:
    image: scylladb/scylla:5.4
    container_name: scylla-init
    volumes:
      - ./init.cql:/init.cql
    entrypoint: ["bash", "-c"]
    command: >
      "
        echo 'Waiting for ScyllaDB to be ready...'
        until cqlsh scylla 9042 -e 'describe keyspaces' >/dev/null 2>&1; do
          sleep 5
        done
        echo 'ScyllaDB is ready. Executing init.cql...'
        cqlsh scylla 9042 -f /init.cql
      "
    networks:
      - my-network
    depends_on:
      scylla:
        condition: service_healthy

  # Elasticsearch : moteur de recherche pour l'indexation et la recherche de données
  elasticsearch:
    image: elasticsearch:8.11.1
    hostname: elasticsearch
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data:/usr/share/elasticsearch/data
    networks:
      - my-network

  # Zookeeper : coordinateur pour le cluster Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      - my-network

  # Kafka : broker de messages, dépendant de Zookeeper
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    networks:
      - my-network
    depends_on:
      zookeeper:
        condition: service_started

  # Redis : base de données en mémoire pour le cache
  redis:
    image: redis:7.2.4-alpine
    container_name: redis
    ports:
      - "6380:6380"
    command: redis-server --requirepass azaleodel
    volumes:
      - redis-data:/data
    networks:
      - my-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a azaleodel ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI : interface utilisateur pour l'administration de Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - my-network
    depends_on:
      kafka:
        condition: service_started

  # Votre application Spring Boot
  yowyob-erp-backend:
    build:
      context: .
    container_name: yowyob-erp-backend
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - spring.cassandra.contact-points=scylla:9042
      - spring.kafka.bootstrap-servers=kafka:9092
    depends_on:
      scylla:
        condition: service_healthy
      scylla-init:
        condition: service_completed_successfully
      elasticsearch:
        condition: service_started
      kafka:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - my-network

# Définition des volumes nommés pour la persistance des données.
volumes:
  scylla-data:
  es-data:
  redis-data:

# Définition du réseau partagé par tous les services.
networks:
  my-network:
    driver: bridge

